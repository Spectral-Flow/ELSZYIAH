[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "elysia-concierge"
version = "1.0.0"
description = "AI-powered concierge system for The Avant luxury apartments - Kairoi Residential"
readme = "README.md"
license = {text = "PROPRIETARY"}
authors = [
    {name = "Kairoi Residential Technology Team", email = "tech@kairoi.com"},
]
maintainers = [
    {name = "Kairoi Residential Technology Team", email = "tech@kairoi.com"},
]
keywords = [
    "property-management",
    "concierge", 
    "apartment-living",
    "ai-assistant",
    "resident-services",
    "the-avant",
    "kairoi-residential"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Other Audience",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "python-dateutil>=2.8.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
full = [
    "starlite[standard]>=1.51.0",
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "llama-cpp-python",
    "openai-whisper",
    "librosa>=0.10.0",
    "asyncpg>=0.28.0", 
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "passlib[bcrypt]>=1.7.0",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "structlog>=23.0.0",
    "sentry-sdk>=1.38.0",
    "sendgrid>=6.10.0",
    "twilio>=8.10.0",
    "Pillow>=10.0.0",
    "celery>=5.3.0",
    "gunicorn>=21.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "watchdog>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
"Homepage" = "https://github.com/Spectral-Flow/ELSZYIAH"
"Repository" = "https://github.com/Spectral-Flow/ELSZYIAH"
"Documentation" = "https://github.com/Spectral-Flow/ELSZYIAH/docs"
"Bug Tracker" = "https://github.com/Spectral-Flow/ELSZYIAH/issues"

[project.scripts]
elysia = "backend.start_server:main"

# =============================================================================
# Tool Configuration
# =============================================================================

[tool.setuptools.packages.find]
where = ["."]
include = ["backend*", "frontend*", "mobile*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
^/(
  (
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.nox
    | \.tox
    | \.venv
    | venv
    | _build
    | buck-out
    | build
    | dist
    | node_modules
  )/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend", "elysia_concierge", "elysia_lite"]
known_third_party = ["fastapi", "pydantic", "starlette", "uvicorn"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503", "F401"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "node_modules",
    ".pytest_cache",
    ".mypy_cache"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "librosa.*",
    "whisper.*",
    "llama_cpp.*",
    "redis.*",
    "celery.*",
    "sendgrid.*",
    "twilio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]