name: 🏗️ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # ===============================
  # Code Quality & Linting
  # ===============================
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🎨 Check Python formatting (Black)
        run: black --check backend/ || echo "Black formatting issues found - run 'black backend/' to fix"

      - name: 📑 Check import sorting (isort)
        run: isort --check-only backend/ || echo "Import sorting issues found - run 'isort backend/' to fix"

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Node.js dependencies
        run: npm ci

      - name: 🎨 Check frontend formatting
        run: npm run lint:check:frontend || echo "Frontend linting issues found"

  # ===============================
  # Backend Testing
  # ===============================
  test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🧪 Run tests
        run: |
          python -m pytest tests/ -v --tb=short

  # ===============================
  # Security Scanning
  # ===============================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install security tools
        run: |
          pip install safety bandit
          pip install -r requirements.txt

      - name: 🔐 Check for vulnerabilities (Safety)
        run: safety check -r requirements.txt || echo "Security vulnerabilities found"

      - name: 🛡️ Security linting (Bandit)
        run: bandit -r backend/ -ll || echo "Security issues found"

  # ===============================
  # Vercel Deployment
  # ===============================
  vercel-deploy:
    name: 🚀 Deploy to Vercel
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Vercel CLI setup
        run: npm i -g vercel
        
      - name: 🌐 Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          if [ -n "$VERCEL_TOKEN" ]; then
            vercel --prod --token $VERCEL_TOKEN
            echo "✅ Successfully deployed to Vercel"
          else
            echo "⚠️ VERCEL_TOKEN not found - skipping deployment"
            echo "To enable Vercel deployment, add VERCEL_TOKEN to repository secrets"
          fi

  # ===============================
  # Notification
  # ===============================
  notify:
    name: 📢 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: always()
    steps:
      - name: 📊 Job Summary
        run: |
          echo "## 🏗️ CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Code Quality | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Backend Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security Scan | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any failing checks above" >> $GITHUB_STEP_SUMMARY
          echo "- Run \`npm run lint:all\` locally to fix formatting issues" >> $GITHUB_STEP_SUMMARY
          echo "- Run \`npm run test:all\` to run tests locally" >> $GITHUB_STEP_SUMMARY
