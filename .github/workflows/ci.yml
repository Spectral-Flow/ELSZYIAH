name: Elysia Concierge CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # =============================================================================
  # Code Quality & Security
  # =============================================================================
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-ci.txt
          pip install pre-commit bandit safety

      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ env.PYTHON_VERSION }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

      - name: Security scan with bandit
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          echo "Security scan completed"

      - name: Dependency vulnerability check
        run: |
          safety check --json --output safety-report.json || true
          echo "Dependency check completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # =============================================================================
  # Testing
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-ci.txt

      - name: Run tests with coverage
        run: |
          pytest tests \
            --cov=backend \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-results.xml \
            -v

      - name: Upload coverage reports
        if: matrix.python-version == env.PYTHON_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/

  # =============================================================================
  # API Integration Tests
  # =============================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: elysia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-ci.txt

      - name: Wait for services
        run: |
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elysia_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          pytest tests -m integration -v --tb=short

  # =============================================================================
  # Build & Deploy
  # =============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build package
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # =============================================================================
  # Vercel Deployment
  # =============================================================================
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [integration, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [ -n "$VERCEL_TOKEN" ]; then
            vercel pull --yes --environment=production --token=$VERCEL_TOKEN
            vercel build --prod --token=$VERCEL_TOKEN
            vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
            echo "‚úÖ Deployed to Vercel"
          else
            echo "‚ö†Ô∏è VERCEL_TOKEN not set, skipping deployment"
          fi

  # =============================================================================
  # Docker Build (Optional)
  # =============================================================================
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: false
          tags: elysia-concierge:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # Performance Tests (Optional)
  # =============================================================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-ci.txt
          pip install locust

      - name: Run performance tests
        run: |
          echo "üöÄ Performance tests would run here"
          # Example: locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s --host http://localhost:8000

  # =============================================================================
  # Notification
  # =============================================================================
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy-vercel.result }}" == "success" ]; then
            echo "‚úÖ Elysia Concierge deployed successfully to production"
          else
            echo "‚ùå Deployment failed or was skipped"
          fi
