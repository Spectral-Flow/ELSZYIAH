# Elysia Concierge - Development Environment
# The Avant - Kairoi Residential
# Usage: docker-compose up -d

version: '3.8'

services:
  # =============================================================================
  # Elysia Backend API
  # =============================================================================
  elysia-api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: elysia-concierge-api
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./tests:/app/tests
      - ./models:/app/models
      - ./.env:/app/.env
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://elysia:secure_password@postgres:5432/elysia_concierge
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=true
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - elysia-network

  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: elysia-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: elysia_concierge
      POSTGRES_USER: elysia
      POSTGRES_PASSWORD: secure_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elysia -d elysia_concierge"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - elysia-network

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: elysia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - elysia-network

  # =============================================================================
  # Frontend Development Server (Optional)
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: elysia-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - elysia-api
    profiles:
      - frontend
    restart: unless-stopped
    networks:
      - elysia-network

  # =============================================================================
  # Database Administration (Optional)
  # =============================================================================
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: elysia-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@theavant.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - admin
    restart: unless-stopped
    networks:
      - elysia-network

  # =============================================================================
  # Redis Commander (Optional)
  # =============================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: elysia-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    depends_on:
      - redis
    profiles:
      - admin
    restart: unless-stopped
    networks:
      - elysia-network

  # =============================================================================
  # Monitoring - Prometheus (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: elysia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    restart: unless-stopped
    networks:
      - elysia-network

  # =============================================================================
  # Monitoring - Grafana (Optional)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: elysia-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    profiles:
      - monitoring
    restart: unless-stopped
    networks:
      - elysia-network

# =============================================================================
# Network Configuration
# =============================================================================
networks:
  elysia-network:
    driver: bridge
    name: elysia-concierge-network

# =============================================================================
# Volume Configuration
# =============================================================================
volumes:
  postgres_data:
    name: elysia-postgres-data
  redis_data:
    name: elysia-redis-data
  pgadmin_data:
    name: elysia-pgadmin-data
  prometheus_data:
    name: elysia-prometheus-data
  grafana_data:
    name: elysia-grafana-data